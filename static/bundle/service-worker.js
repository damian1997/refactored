var serviceWorkerOption = {
  "assets": [
    "/main.087a1c4eb8a9cbbf7aed.css",
    "/main-ae7aad1f43529de965d6.bundle.js"
  ]
};
        
        !function(e){var n={};function t(r){if(n[r])return n[r].exports;var c=n[r]={i:r,l:!1,exports:{}};return e[r].call(c.exports,c,c.exports,t),c.l=!0,c.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var c in e)t.d(r,c,function(n){return e[n]}.bind(null,c));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(module,exports){eval("const CORE_CACHE_VERSION = 'v1'\nconst PREFIXEDASSETS= serviceWorkerOption.assets.map(asset => {\n  return `/bundle${asset}`\n})\nconst CORE_ASSETS = [\n  '/offline'\n].concat(PREFIXEDASSETS)\n\nself.addEventListener('install', event => {\n  console.log('Installing Service Worker')\n  event.waitUntil(\n    caches.open(CORE_CACHE_VERSION)\n    .then((cache) => cache.addAll(CORE_ASSETS))\n    .then(() => self.skipWaiting())\n  )\n})\n\nself.addEventListener('activate', event => {\n  console.log('Activating service worker')\n  event.waitUntil(clients.claim())\n})\n\nself.addEventListener('fetch', event => {\n  if (isCoreGetRequest(event.request)) {\n    console.log('Core get request: ', event.request.url)\n    event.respondWith(\n      caches.open(CORE_CACHE_VERSION)\n      .then(cache => cache.match(event.request.url))\n    )\n  } else if (isHtmlGetRequest(event.request)) {\n    console.log('html get request', event.request.url)\n\n    event.respondWith(\n      caches.open('html-cache')\n      .then(cache => cache.match(event.request.url))\n      .then(response => response ? response : fetchAndCache(event.request, 'html-cache'))\n      .catch(e => {\n        return caches.open(CORE_CACHE_VERSION)\n          .then(cache => cache.match('/offline'))\n      })\n    )\n  }\n})\n\nfunction fetchAndCache(request, cacheName) {\n  return fetch(request)\n    .then(response => {\n      if (!response.ok) {\n        throw new TypeError('Bad response status');\n      }\n\n      const clone = response.clone()\n      caches.open(cacheName).then((cache) => cache.put(request, clone))\n      return response\n    })\n}\n\n// Check functions\nfunction isHtmlGetRequest(request) {\n  return request.method === 'GET' && (request.headers.get('accept') !== null && request.headers.get('accept').indexOf('text/html') > -1);\n}\n\nfunction isCoreGetRequest(request) {\n  return request.method === 'GET' && CORE_ASSETS.includes(getPathName(request.url));\n}\n\nfunction getPathName(requestUrl) {\n  const url = new URL(requestUrl);\n  return url.pathname;\n}\n\n\n//# sourceURL=webpack:///./static/service-worker.js?")}]);